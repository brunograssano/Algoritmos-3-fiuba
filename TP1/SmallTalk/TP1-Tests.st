TestCase subclass: #AlgoFixTests	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!AlgoFixTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/21/2020 20:00'!test11PidoPresupuestoConPinturaGratuitaDebeCalcularSoloLaParteDelPintor	"Arrange"	| algoFix presupuestoMasBarato verde |	algoFix := AlgoFix new.	algoFix registrarPintorDeRodillo: 'Esteban' conValorHora: 10.	verde := algoFix crearPintura: 'verde' conPrecioPorLitro: 0 manosPincel: 1 manosRodillo: 1.		"Act"	presupuestoMasBarato := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: verde.		"Assert"	self assert: 100 equals: (presupuestoMasBarato valor).! !!AlgoFixTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/15/2020 21:50'!test02AlgoFixNoPuedeTenerPinturasConPrecioNegativo	| algoFix |	algoFix := AlgoFix new.	self should: [ algoFix crearPintura: 'Rojo' conPrecioPorLitro: -100 manosPincel: 3 manosRodillo: 2 ] raise: PrecioNoPuedeSerNegativoError.! !!AlgoFixTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/23/2020 20:00'!test09AgregoPintoresQueNoCobranDeberiaDeElegirElDePincel	"Arrange"	| algoFix presupuestoMasBarato verde |	algoFix := AlgoFix new.	algoFix registrarPintorDeRodillo: 'Guillermo' conValorHora: 0.	algoFix registrarPintorDePincel: 'Javier' conValorHora: 0.	verde := algoFix crearPintura: 'verde' conPrecioPorLitro: 100 manosPincel: 1 manosRodillo: 1.		"Act"	presupuestoMasBarato := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: verde.		"Assert"	self assert: 'Javier' equals: (presupuestoMasBarato responsable).! !!AlgoFixTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/15/2020 14:56'!test01AlgoFixNoPuedeRegistrarPintoresConPrecioNegativo	| algoFix |	algoFix := AlgoFix new.	self should: [ algoFix registrarPintorDePincel: 'Ignacio' conValorHora: -50  ] raise: PrecioNoPuedeSerNegativoError.! !!AlgoFixTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/15/2020 21:50'!test06AgregoPintoresDeRodilloYPidoPresupuestoDebeDarElMasBarato	"Arrange"	| algoFix presupuestoMasBarato verde |	algoFix := AlgoFix new.	algoFix registrarPintorDeRodillo: 'Guillermo' conValorHora: 50.	algoFix registrarPintorDeRodillo: 'Javier' conValorHora: 52.	algoFix registrarPintorDeRodillo: 'Lucas' conValorHora: 51.	verde := algoFix crearPintura: 'verde' conPrecioPorLitro: 100 manosPincel: 1 manosRodillo: 1.		"Act"	presupuestoMasBarato := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: verde.	"Deberia de realizar	(10 M2 * 1 horas * 50 Precio * 1 mano) + (10 M2 * 5 litros * 100 Precio * 1 mano)"			"Assert"	self assert: 5500 equals: (presupuestoMasBarato valor).! !!AlgoFixTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/16/2020 11:27'!test07AgregoPintoresDeRodilloYPincelYPidoPresupuestoDeberiaDarElDeRodilloMasBarato	"Arrange"	| algoFix presupuestoMasBarato verde |	algoFix := AlgoFix new.	algoFix registrarPintorDeRodillo: 'Guillermo' conValorHora: 99.99.	algoFix registrarPintorDePincel: 'Javier' conValorHora: 100.	algoFix registrarPintorDePincel: 'Lucas' conValorHora: 101.	algoFix registrarPintorDeRodillo: 'Mariano' conValorHora: 150.	verde := algoFix crearPintura: 'verde' conPrecioPorLitro: 100 manosPincel: 2 manosRodillo: 1.		"Act"	presupuestoMasBarato := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 40 conPintura: verde.		"Assert"	self assert: 'Guillermo' equals: (presupuestoMasBarato responsable).! !!AlgoFixTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/15/2020 21:48'!test05AgregoPintoresDePincelYPidoPresupuestoDebeDarElMasBarato	"Arrange"	| algoFix presupuestoMasBarato verde |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Guillermo' conValorHora: 5000.	algoFix registrarPintorDePincel: 'Javier' conValorHora: 300.	algoFix registrarPintorDePincel: 'Lucas' conValorHora: 2000.	verde := algoFix crearPintura: 'verde' conPrecioPorLitro: 99 manosPincel: 1 manosRodillo: 1.		"Act"	presupuestoMasBarato := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: verde.	"Deberia de realizar	(10 M2 * 2 horas * 300 Precio * 1 mano) + (10 M2 * 4 litros * 99 Precio * 1 mano)"			"Assert"	self assert: 9960 equals: (presupuestoMasBarato valor).! !!AlgoFixTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/15/2020 15:01'!test03SiPidoPresupuestoYNoHayPintoresDebeLanzarError	| algoFix rojo |	algoFix := AlgoFix new.	rojo := Pintura color: 'rojo' conPrecio: 200  manosPincel: 1 yManosRodillo: 2.	self should: [ algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: rojo ] raise: NoHayPintoresRegistradosError.! !!AlgoFixTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/15/2020 21:33'!test04SiPidoLaSumaDeLasDosPartesQueFormanAlPresupuestoMeDevuelveLaSuma	"Arrange"	| algoFix presupuestoEsperado |	algoFix := AlgoFix new.		"Act"	presupuestoEsperado := algoFix manoDeObra: (5 "M2" * 1 "horas" * 5 "Precio" * 1 "manos")  masMateriales: (5 "M2" * 1 "litro" * 5 "Precio" * 1 "manos").		"Assert"	self assert: 50 equals: presupuestoEsperado! !!AlgoFixTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/16/2020 11:32'!test08AgregoPintorDePincelMasCaroQueRodilloYDeberiaElegirPincelPorDescuentoDeCincuentaPorciento	"Arrange"	| algoFix presupuestoMasBarato verde |	algoFix := AlgoFix new.	algoFix registrarPintorDePincel: 'Lautaro' conValorHora: 400.	algoFix registrarPintorDeRodillo: 'Joaquin' conValorHora: 300.	verde := algoFix crearPintura: 'verde' conPrecioPorLitro: 100 manosPincel: 1 manosRodillo: 1.		"Act"	presupuestoMasBarato := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 60 conPintura: verde.		"Assert"	self assert: 'Lautaro' equals: (presupuestoMasBarato responsable).! !!AlgoFixTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/21/2020 19:28'!test10AgregoPintoresYPinturaGratuitaElPresupuestoDebeSerCero	"Arrange"	| algoFix presupuestoMasBarato verde |	algoFix := AlgoFix new.	algoFix registrarPintorDeRodillo: 'Guillermo' conValorHora: 0.	verde := algoFix crearPintura: 'verde' conPrecioPorLitro: 0 manosPincel: 1 manosRodillo: 1.		"Act"	presupuestoMasBarato := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: verde.		"Assert"	self assert: 0 equals: (presupuestoMasBarato valor).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AlgoFixTests class	instanceVariableNames: ''!!AlgoFixTests class methodsFor: 'accessing' stamp: 'BrunoGrassano 5/23/2020 20:49'!packageNamesUnderTest 	^#('TP1-AlgoFix')! !TestCase subclass: #HerramientaTests	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!HerramientaTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/15/2020 14:48'!test01ElPrecioEnElPincelNoPuedeSerNegativo	| pincel |	pincel := Pincel new.	self should: [pincel agregarPrecio: -1] raise:PrecioNoPuedeSerNegativoError.! !!HerramientaTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/21/2020 19:43'!test08PreguntoLasManosNecesariasConUnaPinturaEnPincelYDevuelveLasDePincel	"Arrange"	| pincel pintura manosNecesarias |	pincel := Pincel cobraLaHora: 100.	pintura := Pintura color: 'Blanco' conPrecio: 350 manosPincel: 17  yManosRodillo: 3.	"Act"	manosNecesarias := pincel manosNecesariasConPintura: pintura.		"Assert"	self assert: 17 equals:manosNecesarias.! !!HerramientaTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/16/2020 12:21'!test05LosMetrosCuadradosEnElPincelNoPuedenSerCero	| pincel |	pincel := Pincel cobraLaHora: 200.	self should: [pincel costoManoDeObraPorArea: 0] raise:AreaDebeSerMayorACeroError.! !!HerramientaTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/23/2020 20:02'!test11ElRodilloCalculaParteDelCostoDeMaterialesDeberiaDarCincoPorCostoDeLitros	"Arrange"	| rodillo costoDeMateriales |	rodillo := Rodillo cobraLaHora: 200.		"Act"	costoDeMateriales := rodillo costoMaterialesConPrecioPintura: 1 yAreaDe: 1. 		"Assert"	self assert: 5 equals:costoDeMateriales.! !!HerramientaTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/15/2020 14:48'!test02ElPrecioEnElRodilloNoPuedeSerNegativo	| rodillo |	rodillo := Rodillo new.	self should: [rodillo agregarPrecio: -6] raise:PrecioNoPuedeSerNegativoError.! !!HerramientaTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/23/2020 20:02'!test10ElPincelCalculaParteDelCostoDeMaterialesDeberiaDarCuatroPorCostoDeLitros	"Arrange"	| pincel costoDeMateriales |	pincel := Pincel cobraLaHora: 200.		"Act"	costoDeMateriales := pincel costoMaterialesConPrecioPintura: 1 yAreaDe: 1. 		"Assert"	self assert: 4 equals:costoDeMateriales.! !!HerramientaTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/21/2020 19:41'!test07ElRodilloCalculaElPresupuestoDeManoDeObraYLoDevuelve	"Arrange"	| rodillo calculoDeLaHerramienta |	rodillo := Rodillo cobraLaHora: 100.		"Act"	calculoDeLaHerramienta := rodillo costoManoDeObraPorArea: 15.		"Assert"	self assert: 1500 equals:calculoDeLaHerramienta.! !!HerramientaTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/16/2020 12:21'!test03LosMetrosCuadradosEnElPincelNoPuedenSerNegativos	| pincel |	pincel := Pincel cobraLaHora: 200.	self should: [pincel costoManoDeObraPorArea: -10] raise:AreaDebeSerMayorACeroError.! !!HerramientaTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/21/2020 19:45'!test09PreguntoLasManosNecesariasConUnaPinturaEnRodilloYDevuelveLasDeRodillo	"Arrange"	| rodillo pintura manosNecesarias |	rodillo := Rodillo cobraLaHora: 100.	pintura := Pintura color: 'Blanco' conPrecio: 350 manosPincel: 5  yManosRodillo: 12.	"Act"	manosNecesarias := rodillo manosNecesariasConPintura: pintura.		"Assert"	self assert: 12 equals:manosNecesarias.! !!HerramientaTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/16/2020 12:21'!test04LosMetrosCuadradosEnElRodilloNoPuedenSerNegativos	| rodillo |	rodillo := Pincel cobraLaHora: 50.	self should: [rodillo costoManoDeObraPorArea: -2] raise:AreaDebeSerMayorACeroError.! !!HerramientaTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/16/2020 12:49'!test06ElPincelCalculaElPresupuestoDeManoDeObraYLoDevuelve	"Arrange"	| pincel calculoDeLaHerramienta |	pincel := Pincel cobraLaHora: 200.		"Act"	calculoDeLaHerramienta := pincel costoManoDeObraPorArea: 10.		"Assert"	self assert: 4000 equals:calculoDeLaHerramienta.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HerramientaTests class	instanceVariableNames: ''!!HerramientaTests class methodsFor: 'accessing' stamp: 'BrunoGrassano 5/23/2020 20:47'!packageNamesUnderTest 	^#('TP1-AlgoFix')! !TestCase subclass: #PintorTests	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PintorTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/19/2020 23:18'!test05ElPintorConRodilloNoTieneQueAplicarDescuentoSiSonMasDe40MetrosCuadrados	"Arrange"	| pintor costoPintor |	pintor := Pintor conNombre: 'Juan' yHerramienta: (Rodillo cobraLaHora: 100).		"Act"	costoPintor := pintor calcularCostoManoDeObraParaArea: 100.		"Assert"	self assert: 10000 equals: costoPintor! !!PintorTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/23/2020 20:03'!test01ElPintorConPincelYAreaSinDescuentoDevuelveLoEsperado	"Arrange"	| pintor costoPintor |	pintor := Pintor conNombre: 'Juan' yHerramienta: (Pincel cobraLaHora: 100).		"Act"	costoPintor := pintor calcularCostoManoDeObraParaArea: 39.		"Assert"	self assert: 7800 equals: costoPintor! !!PintorTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/23/2020 20:04'!test03ElPintorConPincelTieneQueAplicarDescuentoDelCincuentaPorcientoConMasDeCuarentaMetrosCuadrados	"Arrange"	| pintor costoPintor |	pintor := Pintor conNombre: 'Juan' yHerramienta: (Pincel cobraLaHora: 100).		"Act"	costoPintor := pintor calcularCostoManoDeObraParaArea: 100.		"Assert"	self assert: 10000 equals: costoPintor! !!PintorTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/19/2020 23:18'!test04ElPintorConPincelNoTieneQueAplicarDescuentoSiSon40MetrosCuadrados	"Arrange"	| pintor costoPintor |	pintor := Pintor conNombre: 'Juan' yHerramienta: (Pincel cobraLaHora: 100).		"Act"	costoPintor := pintor calcularCostoManoDeObraParaArea: 40.		"Assert"	self assert: 8000 equals: costoPintor! !!PintorTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/21/2020 20:04'!test06ElPintorConPincelCalculaParteDelCostoDeMaterialesYDebeDarSoloLoCorrespondienteALosLitros	"Arrange"	| pintor costoPintor |	pintor := Pintor conNombre: 'Juan' yHerramienta: (Pincel cobraLaHora: 100).		"Act"	costoPintor := pintor calcularCostoMaterialesConPrecioPintura: 1 yAreaDe: 1. 		"Assert"	self assert: 4 equals: costoPintor! !!PintorTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/19/2020 23:18'!test02ElPintorAlCalucularElCostoNoPuedeRecibirCantidadMetrosCuadradosNegativos	| pintor |	pintor := Pintor conNombre: 'Juan' yHerramienta: (Pincel cobraLaHora: 100).		self should: [pintor calcularCostoManoDeObraParaArea: -50] raise: AreaDebeSerMayorACeroError 		! !!PintorTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/21/2020 20:05'!test06ElPintorConRodilloCalculaParteDelCostoDeMaterialesYDebeDarSoloLoCorrespondienteALosLitros	"Arrange"	| pintor costoPintor |	pintor := Pintor conNombre: 'Juan' yHerramienta: (Rodillo cobraLaHora: 100).		"Act"	costoPintor := pintor calcularCostoMaterialesConPrecioPintura: 1 yAreaDe: 1. 		"Assert"	self assert: 5 equals: costoPintor! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PintorTests class	instanceVariableNames: ''!!PintorTests class methodsFor: 'accessing' stamp: 'BrunoGrassano 5/23/2020 20:47'!packageNamesUnderTest 	^#('TP1-AlgoFix')! !TestCase subclass: #PinturaTests	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PinturaTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/16/2020 13:19'!test04ElCostoTotalNoPuedeCalcularseCuandoElAreaEsCero	| rojo pintor |	rojo := Pintura color: 'rojo' conPrecio:20 manosPincel: 1 yManosRodillo: 1.	pintor := Pintor conNombre:'Lucas' yHerramienta:(Pincel cobraLaHora: 50).		self should: [rojo calcularCostoMaterialesParaArea: 0 conPintor: pintor ] raise: AreaDebeSerMayorACeroError .! !!PinturaTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/15/2020 14:54'!test03LaCantidadDeManosDePincelNoPuedeSerMenorACero	self should: [Pintura color: 'amarillo' conPrecio:150 manosPincel: -3 yManosRodillo: 5] raise:LaCantidadDeManosDebeSerMayorACeroError.! !!PinturaTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/16/2020 13:08'!test05LaPinturaCalculaElPresupuestoDeMaterialesConPincelDevolviendoLoEsperado	"Arrange"	| rojo pintor costoDeMateriales |	rojo := Pintura color: 'rojo' conPrecio:200 manosPincel: 1 yManosRodillo: 1.	pintor := Pintor conNombre:'Lucas' yHerramienta:(Pincel cobraLaHora: 50).		"Act"	costoDeMateriales := rojo calcularCostoMaterialesParaArea: 10 conPintor: pintor.		"Assert"	self assert: 8000 equals: costoDeMateriales .! !!PinturaTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/16/2020 13:10'!test06LaPinturaCalculaElPresupuestoDeMaterialesConRodillonDevolviendoLoEsperado	"Arrange"	| rojo pintor costoDeMateriales |	rojo := Pintura color: 'rojo' conPrecio:200 manosPincel: 1 yManosRodillo: 1.	pintor := Pintor conNombre:'Lucas' yHerramienta:(Rodillo cobraLaHora: 50).		"Act"	costoDeMateriales := rojo calcularCostoMaterialesParaArea: 10 conPintor: pintor.		"Assert"	self assert: 10000 equals: costoDeMateriales .! !!PinturaTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/15/2020 14:48'!test01ElPrecioPorLitroNoPuedeSerMenorACero	self should: [Pintura color: 'azul' conPrecio:-1 manosPincel: 1 yManosRodillo: 1] raise:PrecioNoPuedeSerNegativoError.! !!PinturaTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/15/2020 14:54'!test02LaCantidadDeManosDeRodilloNoPuedeSerCero	self should: [Pintura color: 'rojo' conPrecio:20 manosPincel: 1 yManosRodillo: 0] raise:LaCantidadDeManosDebeSerMayorACeroError.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PinturaTests class	instanceVariableNames: ''!!PinturaTests class methodsFor: 'accessing' stamp: 'BrunoGrassano 5/23/2020 20:47'!packageNamesUnderTest 	^#('TP1-AlgoFix')! !TestCase subclass: #PresupuestoTests	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PresupuestoTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/21/2020 19:11'!test02UnPresupuestoAlCrearloYPedirElNombreDebeLanzarError	| presupuesto |	presupuesto := Presupuesto new.	self should: [ presupuesto responsable ] raise: PresupuestoNoCalculadoError  ! !!PresupuestoTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/21/2020 19:12'!test06CreoUnaColeccionVaciaYLaMandoAPresupuestoYDebeLanzarError	| presupuesto pintores azul |	azul := Pintura color: 'azul' conPrecio: 200 manosPincel: 8  yManosRodillo: 1.	presupuesto := Presupuesto new.	pintores := OrderedCollection new.	self should:[presupuesto calcularMasBaratoEntre: pintores para: 10 conPintura: azul] raise:NoHayPintoresRegistradosError ! !!PresupuestoTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/23/2020 20:06'!test03CreoUnaColeccionDePintoresYElPresupuestoDebeElegirElDeRodilloMasBarato	| presupuesto pintores pintor1 pintor2 pintor3 pintor4 azul|	"Arrange"	azul := Pintura color: 'azul' conPrecio: 200 manosPincel: 1  yManosRodillo: 2.	presupuesto := Presupuesto new.	pintores := OrderedCollection new.			pintor1 := Pintor conNombre: 'Adrian' yHerramienta: (Pincel cobraLaHora: 5000). 	pintor2 := Pintor conNombre: 'Gonzalo' yHerramienta: (Pincel cobraLaHora: 4000).	pintor3 := Pintor conNombre: 'Javier' yHerramienta: (Rodillo cobraLaHora: 10). 	pintor4 := Pintor conNombre: 'Nicolas' yHerramienta: (Rodillo cobraLaHora: 20). 		pintores add: pintor1;add: pintor2;add: pintor3;add: pintor4.		"Act"	presupuesto calcularMasBaratoEntre: pintores para: 5 conPintura: azul.		"Act y Assert"	self assert: 'Javier' equals: (presupuesto responsable).! !!PresupuestoTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/23/2020 20:10'!test07SeCalculaElPresupuestoParaUnSoloPintorYDeberiaDevolverElNumeroEsperado	| presupuesto pintor azul valorCalculado |	"Arrange"	presupuesto := Presupuesto new.	azul := Pintura color: 'azul' conPrecio: 200 manosPincel: 2  yManosRodillo: 2.	pintor := Pintor conNombre: 'Adrian' yHerramienta: (Rodillo cobraLaHora: 50). 	"Act"	valorCalculado := presupuesto calcularPresupuestoDe: pintor paraMetrosCuadrados: 50  conPintura: azul.	"(50 M2 * 1 hora * 50 Precio * 2 manos) + (50 M2 * 5 litros * 200 Precio * 2 manos)"		"Act y Assert"	self assert: 105000 equals: valorCalculado.! !!PresupuestoTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/21/2020 19:12'!test04CreoUnaColeccionDePintoresDondeCobranLoMismoDebeElegirConPincelPorDescuento	| presupuesto pintores pintor1 pintor2 pintor3 pintor4 azul |	"Arrange"	azul := Pintura color: 'azul' conPrecio: 200 manosPincel: 1  yManosRodillo: 2.	presupuesto := Presupuesto new.	pintores := OrderedCollection new.		pintor1 := Pintor conNombre: 'Adrian' yHerramienta: (Rodillo cobraLaHora: 5000). 	pintor2 := Pintor conNombre: 'Gonzalo' yHerramienta: (Rodillo cobraLaHora: 5000).	pintor3 := Pintor conNombre: 'Javier' yHerramienta: (Rodillo cobraLaHora: 5000). 	pintor4 := Pintor conNombre: 'Nicolas' yHerramienta: (Pincel cobraLaHora: 5000). 		pintores add: pintor1;add: pintor2;add: pintor3;add: pintor4.		"Act"	presupuesto calcularMasBaratoEntre: pintores para: 55 conPintura: azul.		"Act y Assert"	self assert: 'Nicolas' equals: (presupuesto responsable).! !!PresupuestoTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/23/2020 20:08'!test05CreoUnaColeccionDePintoresDondeElDeRodilloEsMasCaroPeroPincelTieneMasManosEntoncesEligeElDeRodillo	| presupuesto pintores pintor1 pintor2 azul |	"Arrange"	azul := Pintura color: 'azul' conPrecio: 200 manosPincel: 8  yManosRodillo: 1.	presupuesto := Presupuesto new.	pintores := OrderedCollection new.		pintor1 := Pintor conNombre: 'Adrian' yHerramienta: (Rodillo cobraLaHora: 5). 	pintor2 := Pintor conNombre: 'Gonzalo' yHerramienta: (Pincel cobraLaHora: 1).	pintores add: pintor1;add: pintor2.		"Act"	presupuesto calcularMasBaratoEntre: pintores para: 10 conPintura: azul.		"Act y Assert"	self assert: 'Adrian' equals: (presupuesto responsable).! !!PresupuestoTests methodsFor: 'tests' stamp: 'BrunoGrassano 5/21/2020 19:11'!test01UnPresupuestoAlCrearloYPedirElValorDebeLanzarError	| presupuesto |	presupuesto := Presupuesto new.	self should: [ presupuesto valor ] raise: PresupuestoNoCalculadoError  ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PresupuestoTests class	instanceVariableNames: ''!!PresupuestoTests class methodsFor: 'accessing' stamp: 'BrunoGrassano 5/23/2020 20:47'!packageNamesUnderTest 	^#('TP1-AlgoFix')! !