Error subclass: #AreaDebeSerMayorACeroError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Excepciones'!!AreaDebeSerMayorACeroError commentStamp: 'BrunoGrassano 5/15/2020 22:07' prior: 0!Excepcion que se debera de lanzar cuando el area sea cero o menor.!Error subclass: #LaCantidadDeManosDebeSerMayorACeroError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Excepciones'!!LaCantidadDeManosDebeSerMayorACeroError commentStamp: 'BrunoGrassano 5/15/2020 22:15' prior: 0!Esta excepcion debe de ser usada cuando la cantidad de manos que se deben de pasar de pintura es 0 o negativa!Error subclass: #NoHayPintoresRegistradosError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Excepciones'!!NoHayPintoresRegistradosError commentStamp: 'BrunoGrassano 5/15/2020 22:15' prior: 0!La excepcion se debe de lanzar cuando AlgoFix no tiene pintores registrados!Error subclass: #PrecioNoPuedeSerNegativoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Excepciones'!!PrecioNoPuedeSerNegativoError commentStamp: 'BrunoGrassano 5/15/2020 23:05' prior: 0!Excepcion que debe lanzarse cuando se intenta ingresar un precio negativo!Error subclass: #PresupuestoNoCalculadoError	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Excepciones'!!PresupuestoNoCalculadoError commentStamp: 'BrunoGrassano 5/19/2020 15:16' prior: 0!Excepcion que debe lanzarse cuando se le pide algo a un presupuesto que no esta inicializado. Esto ocurre si no se ha realizado los calculos previos.!Object subclass: #AlgoFix	instanceVariableNames: 'pintores'	classVariableNames: ''	package: 'TP1-AlgoFix'!!AlgoFix commentStamp: 'BrunoGrassano 5/15/2020 22:00' prior: 0!Clase AlgoFix 	Esta clase es responsable del manejo general. Se encarga de ir delegando las distintas operaciones que puede realizar.!!AlgoFix methodsFor: 'initialization' stamp: 'BrunoGrassano 5/15/2020 14:42'!initialize	pintores := OrderedCollection new.! !!AlgoFix methodsFor: 'public' stamp: 'BrunoGrassano 5/15/2020 22:06'!registrarPintorDeRodillo: unNombre conValorHora: unPrecioHora	"Precondiciones: El precio no pueden ser negativo"	"Postcondiciones: Se registrara correctamente el pintor"	self registrarPintor: unNombre conHerramienta: (Rodillo cobraLaHora: unPrecioHora) ! !!AlgoFix methodsFor: 'public' stamp: 'BrunoGrassano 5/15/2020 22:05'!registrarPintorDePincel: nombrePintor conValorHora: unPrecioPorHora	"Precondiciones: El precio no pueden ser negativo"	"Postcondiciones: Se registrara correctamente el pintor"	self registrarPintor: nombrePintor conHerramienta: (Pincel cobraLaHora: unPrecioPorHora) 	! !!AlgoFix methodsFor: 'public' stamp: 'BrunoGrassano 5/16/2020 12:02'!presupuestoMasBaratoParaPintarMetrosCuadrados: metrosCuadrados conPintura: unaPintura	"Precondiciones: Los metros cuadrados tienen que ser mayor a cero y la coleccion de pintores no puede estar vacia"	"Postcondiciones: Se devolvera un presupuesto que tenga el menor valor posible"	| presupuesto |	presupuesto := Presupuesto new.	presupuesto calcularMasBaratoEntre: pintores para: metrosCuadrados conPintura: unaPintura.	^presupuesto! !!AlgoFix methodsFor: 'public' stamp: 'BrunoGrassano 5/15/2020 22:02'!crearPintura: unColor conPrecioPorLitro: unPrecio manosPincel: cantidadManosPincel manosRodillo: cantidadManosRodillo	"Precondiciones: El precio y la cantidad de manos para rodillo y pincel no pueden ser negativos"	"Postcondiciones: Se devolvera un objeto de tipo Pintura"	^Pintura color: unColor conPrecio: unPrecio manosPincel: cantidadManosPincel  yManosRodillo: cantidadManosRodillo.	! !!AlgoFix methodsFor: 'private' stamp: 'BrunoGrassano 5/14/2020 19:35'!registrarPintor: unNombre conHerramienta: herramienta	pintores add: (Pintor conNombre: unNombre yHerramienta: herramienta )! !!AlgoFix methodsFor: 'event testing' stamp: 'BrunoGrassano 5/14/2020 15:18'!manoDeObra: precioManoDeObra masMateriales: precioMateriales	^(precioManoDeObra + precioMateriales) ! !Object subclass: #Herramienta	instanceVariableNames: 'precioPorHora litrosParaPintarMetroCuadrado tiempoEnPintarMetroCuadrado'	classVariableNames: ''	package: 'TP1-AlgoFix'!!Herramienta commentStamp: 'BrunoGrassano 5/15/2020 22:14' prior: 0!Clase abstracta Herramienta, esta clase no debe ser instanciada	Pincel y Rodillo heredan de esta clase ya que comparten buena parte del comportamiento, siendo distintas solamente en el calculo del costo total.!!Herramienta methodsFor: 'initialization - private' stamp: 'BrunoGrassano 5/15/2020 22:08'!agregarPrecio: unPrecioHora	"Precondiciones: El precio no pueden ser negativo"	"Postcondiciones: Se guardara el precio en la herramienta"	(unPrecioHora < 0) ifTrue: [ PrecioNoPuedeSerNegativoError new signal ].	precioPorHora := unPrecioHora! !!Herramienta methodsFor: 'abstract' stamp: 'BrunoGrassano 5/16/2020 12:21'!costoManoDeObraPorArea: metrosCuadrados 	^self subclassResponsibility ! !!Herramienta methodsFor: 'abstract' stamp: 'BrunoGrassano 5/17/2020 18:22'!manosNecesariasConPintura: unaPintura	^self subclassResponsibility ! !!Herramienta methodsFor: 'public' stamp: 'BrunoGrassano 5/16/2020 13:20'!costoMaterialesConPrecioPintura: precioPorLitro yAreaDe: metrosCuadrados	"Precondiciones: Los metros cuadrados deben ser mayor a 0"	"Postcondiciones: Calculara el costo correspondiente a los materiales  sin incluir el costo por las manos"	(metrosCuadrados <= 0)ifTrue:[AreaDebeSerMayorACeroError new signal].	^precioPorLitro * metrosCuadrados * litrosParaPintarMetroCuadrado ! !Herramienta subclass: #Pincel	instanceVariableNames: 'metrosCuadradosParaDescuento'	classVariableNames: ''	package: 'TP1-AlgoFix'!!Pincel commentStamp: 'BrunoGrassano 5/15/2020 22:12' prior: 0!Clase Pincel, hereda de Herramienta!!Pincel methodsFor: 'public' stamp: 'BrunoGrassano 5/17/2020 18:46'!costoManoDeObraPorArea: metrosCuadrados	"Precondiciones: Los metros cuadrados tienen que ser mayor a cero"	"Postcondiciones: Se devolvera el presupuesto de la mano de obra correspondiente al pincel  sin incluir el costo por las manos"	| descuento |	(metrosCuadrados <= 0) ifTrue:[AreaDebeSerMayorACeroError new signal.].	descuento := 1.	(metrosCuadradosParaDescuento < metrosCuadrados )ifTrue: [  		descuento := 0.5.	].	^precioPorHora * metrosCuadrados * tiempoEnPintarMetroCuadrado * descuento! !!Pincel methodsFor: 'public' stamp: 'BrunoGrassano 5/17/2020 18:23'!manosNecesariasConPintura: unaPintura	^unaPintura manosNecesariasConPincel! !!Pincel methodsFor: 'initialization' stamp: 'BrunoGrassano 5/17/2020 18:45'!initialize	tiempoEnPintarMetroCuadrado := 2.	metrosCuadradosParaDescuento := 40.	litrosParaPintarMetroCuadrado := 4! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pincel class	instanceVariableNames: ''!!Pincel class methodsFor: 'initialization' stamp: 'BrunoGrassano 5/14/2020 15:10'!cobraLaHora: precioHora	|pincel|	pincel := self new.	pincel agregarPrecio: precioHora.	^pincel.! !Object subclass: #Pintor	instanceVariableNames: 'nombre herramienta'	classVariableNames: ''	package: 'TP1-AlgoFix'!!Pintor commentStamp: 'BrunoGrassano 5/15/2020 22:58' prior: 0!Clase Pintor 	Es responsable de almacenar los datos del pintor y de delegar en la herramienta los calculos correspondientes al trabajo que haga!!Pintor methodsFor: 'public' stamp: 'BrunoGrassano 5/14/2020 20:50'!obtenerNombre	^nombre! !!Pintor methodsFor: 'public' stamp: 'BrunoGrassano 5/17/2020 18:22'!manosNecesariasConPintura: unaPintura	^herramienta manosNecesariasConPintura: unaPintura! !!Pintor methodsFor: 'public' stamp: 'BrunoGrassano 5/16/2020 13:20'!calcularCostoMaterialesConPrecioPintura: precioPorLitro yAreaDe: metrosCuadrados	"Precondiciones: Los metros cuadrados deben ser mayor a 0"	"Postcondiciones: Devolvera el costo correspondiente a los materiales  sin incluir el costo por las manos"	^herramienta costoMaterialesConPrecioPintura: precioPorLitro  yAreaDe: metrosCuadrados ! !!Pintor methodsFor: 'public' stamp: 'BrunoGrassano 5/16/2020 12:26'!calcularCostoManoDeObraParaArea: metrosCuadrados		"Precondiciones: Los metros cuadrados tienen que ser mayor a cero"	"Postcondiciones: Se devolvera el presupuesto de la mano de obra correspondiente  sin incluir el costo por las manos"	^herramienta costoManoDeObraPorArea: metrosCuadrados ! !!Pintor methodsFor: 'initialization - private' stamp: 'BrunoGrassano 5/14/2020 14:33'!agregarHerramienta: unaHerramienta	herramienta := unaHerramienta ! !!Pintor methodsFor: 'initialization - private' stamp: 'BrunoGrassano 5/14/2020 13:53'!agregarNombre: nombrePintor	nombre := nombrePintor ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pintor class	instanceVariableNames: ''!!Pintor class methodsFor: 'initialization' stamp: 'BrunoGrassano 5/14/2020 14:33'!conNombre: nombrePintor yHerramienta: herramienta 	|pintor|	pintor := self new.	pintor agregarNombre: nombrePintor.	pintor agregarHerramienta: herramienta.	^pintor		! !Object subclass: #Pintura	instanceVariableNames: 'nombre precioPorLitro manosPincel manosRodillo'	classVariableNames: ''	package: 'TP1-AlgoFix'!!Pintura commentStamp: 'BrunoGrassano 5/15/2020 23:04' prior: 0!Clase Pintura	Contiene los datos de la pintura y realiza los calculos correspondientes con el apartado de materiales del presupuesto!!Pintura methodsFor: 'initialization - private' stamp: 'BrunoGrassano 5/15/2020 22:59'!agregarPrecio: precio	"Precondiciones: El precio no puede ser negativo"	"Postcondiciones: Se asignara el precio de la pintura"	(precio<0)ifTrue:[PrecioNoPuedeSerNegativoError new signal].	precioPorLitro := precio! !!Pintura methodsFor: 'initialization - private' stamp: 'BrunoGrassano 5/15/2020 22:59'!agregarManosRodillo: cantManosRodillo 	"Precondiciones: La cantidad de manos debe de ser mayor a 0"	"Postcondiciones: Se asignara la cantidad de manos en el rodillo"	(cantManosRodillo <= 0)ifTrue:[LaCantidadDeManosDebeSerMayorACeroError new signal].	manosRodillo := cantManosRodillo ! !!Pintura methodsFor: 'initialization - private' stamp: 'BrunoGrassano 5/15/2020 22:58'!agregarManosPincel: cantManosPincel	"Precondiciones: La cantidad de manos debe de ser mayor a 0"	"Postcondiciones: Se asignara la cantidad de manos en el pincel"	(cantManosPincel <= 0)ifTrue:[LaCantidadDeManosDebeSerMayorACeroError new signal].	manosPincel := cantManosPincel! !!Pintura methodsFor: 'initialization - private' stamp: 'BrunoGrassano 5/14/2020 14:11'!agregarNombre: color 	nombre := color! !!Pintura methodsFor: 'public' stamp: 'BrunoGrassano 5/17/2020 18:23'!manosNecesariasConPincel	^manosPincel ! !!Pintura methodsFor: 'public' stamp: 'BrunoGrassano 5/16/2020 13:19'!calcularCostoMaterialesParaArea: metrosCuadrados conPintor: unPintor	"Precondiciones: Los metros cuadrados deben ser mayor a 0"	"Postcondiciones: Devolvera el costo correspondiente a los materiales  sin incluir el costo por las manos"	^ unPintor calcularCostoMaterialesConPrecioPintura: precioPorLitro yAreaDe: metrosCuadrados ! !!Pintura methodsFor: 'public' stamp: 'BrunoGrassano 5/17/2020 18:23'!manosNecesariasConRodillo	^manosRodillo ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pintura class	instanceVariableNames: ''!!Pintura class methodsFor: 'initialization' stamp: 'BrunoGrassano 5/14/2020 14:13'!color: nombrePintura conPrecio: precio manosPincel: cantidadManosPincel  yManosRodillo: cantidadManosRodillo	|pintura|	pintura := self new.	pintura agregarNombre: nombrePintura.	pintura agregarPrecio: precio.	pintura agregarManosPincel: cantidadManosPincel.	pintura agregarManosRodillo: cantidadManosRodillo.	^pintura! !Object subclass: #Presupuesto	instanceVariableNames: 'pintorConMejorPresupuesto valorTotal'	classVariableNames: ''	package: 'TP1-AlgoFix'!!Presupuesto commentStamp: 'BrunoGrassano 5/15/2020 23:07' prior: 0!Clase Presupuesto	Sera la responsable de delegar en el pintor y la pintura los calculos correspondientes a cada uno en el presupuesto	Tambien almacena los datos del pintor que va a encargarse del trabajo.!!Presupuesto methodsFor: 'private' stamp: 'BrunoGrassano 5/17/2020 18:26'!calcularPresupuestoDe: unPintor paraMetrosCuadrados: metrosCuadrados conPintura: unaPintura	"Precondiciones: Los metros cuadrados deben ser mayores a 0."	"Postcondiciones: Se devolvera el presupuesto correspondiente a un pintor."	| valorManoDeObra valorMateriales presupuesto |	valorManoDeObra := unPintor calcularCostoManoDeObraParaArea: metrosCuadrados.	valorMateriales := unaPintura calcularCostoMaterialesParaArea: metrosCuadrados conPintor: unPintor.	presupuesto := (valorManoDeObra + valorMateriales) * (unPintor manosNecesariasConPintura: unaPintura).		^presupuesto! !!Presupuesto methodsFor: 'public' stamp: 'BrunoGrassano 5/16/2020 12:05'!calcularMasBaratoEntre: pintores para: metrosCuadrados conPintura: unaPintura	"Precondiciones: El area debe ser positiva y la coleccion de pintores no debe estar vacia"	"Postcondiciones: Se calculara el presupuesto mas barato"	(pintores isEmpty)ifTrue:[NoHayPintoresRegistradosError new signal].	pintorConMejorPresupuesto := pintores detectMin: [ :unPintor | 		self calcularPresupuestoDe: unPintor paraMetrosCuadrados: metrosCuadrados conPintura: unaPintura.	].	valorTotal := self calcularPresupuestoDe: pintorConMejorPresupuesto paraMetrosCuadrados: metrosCuadrados conPintura: unaPintura.! !!Presupuesto methodsFor: 'public' stamp: 'BrunoGrassano 5/19/2020 15:17'!valor	valorTotal ifNil:[PresupuestoNoCalculadoError new signal].	^valorTotal! !!Presupuesto methodsFor: 'public' stamp: 'BrunoGrassano 5/19/2020 15:17'!responsable	pintorConMejorPresupuesto ifNil:[PresupuestoNoCalculadoError new signal].	^pintorConMejorPresupuesto obtenerNombre! !Herramienta subclass: #Rodillo	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-AlgoFix'!!Rodillo commentStamp: 'BrunoGrassano 5/15/2020 22:14' prior: 0!Clase Rodillo, hereda de Herramienta!!Rodillo methodsFor: 'initialization' stamp: 'BrunoGrassano 5/17/2020 18:46'!initialize 	tiempoEnPintarMetroCuadrado := 1.	litrosParaPintarMetroCuadrado := 5! !!Rodillo methodsFor: 'public' stamp: 'BrunoGrassano 5/17/2020 18:46'!costoManoDeObraPorArea: metrosCuadrados	"Precondiciones: Los metros cuadrados tienen que ser mayor a cero"	"Postcondiciones: Se devolvera el presupuesto de la mano de obra correspondiente al rodillo sin incluir el costo por las manos"	(metrosCuadrados <= 0) ifTrue:[AreaDebeSerMayorACeroError new signal.].	^precioPorHora * metrosCuadrados  * tiempoEnPintarMetroCuadrado! !!Rodillo methodsFor: 'public' stamp: 'BrunoGrassano 5/17/2020 18:23'!manosNecesariasConPintura: unaPintura	^unaPintura manosNecesariasConRodillo! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Rodillo class	instanceVariableNames: ''!!Rodillo class methodsFor: 'initialization' stamp: 'BrunoGrassano 5/14/2020 15:10'!cobraLaHora: precioHora	|rodillo|	rodillo := self new.	rodillo agregarPrecio: precioHora.	^rodillo.! !