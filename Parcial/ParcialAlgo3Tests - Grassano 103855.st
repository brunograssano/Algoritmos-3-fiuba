TestCase subclass: #TestMotoneta	instanceVariableNames: ''	classVariableNames: ''	package: 'ParcialAlgo3Tests'!!TestMotoneta methodsFor: 'tests' stamp: 'BrunoGrassano 6/30/2020 19:39'!testMotoDeCarreraAvanza1200en5Horas	"Arrange"	| unaMotoDeCarrera  |	unaMotoDeCarrera := VehiculoTerrestre crearMotoDeCarrera .	"Act y Assert"	self assert: (unaMotoDeCarrera cantidadKmAlAvanzarHoras: 5 ) equals: 1200! !!TestMotoneta methodsFor: 'tests' stamp: 'BrunoGrassano 6/30/2020 19:53'!testCreoUnVehiculoTerrestreSinInicializarYPidoCantidadDeKMLanzaExcepcion	"Act"	| unVehiculo |	unVehiculo := VehiculoTerrestre new.	"Act y Assert"	self should: [unVehiculo cantidadKmAlAvanzarHoras: 7] raise: VehiculoNoInicializadoError .! !!TestMotoneta methodsFor: 'tests' stamp: 'BrunoGrassano 6/30/2020 19:39'!testMotonetaAvanza80kmEnDosHs	"Act"	| unaMotoneta |	unaMotoneta := VehiculoTerrestre crearMotoneta .	"Act y Assert"	self assert: (unaMotoneta cantidadKmAlAvanzarHoras: 2 )equals: 80.! !!TestMotoneta methodsFor: 'tests' stamp: 'BrunoGrassano 6/30/2020 20:53'!testPreguntoCuantoAvanzaConTiempoNegativoLanzaExcepcion	|motoneta|	motoneta := VehiculoTerrestre crearMotoneta.		self should: [ motoneta cantidadKmAlAvanzarHoras: -4 ] raise: TiempoInvalidoError ! !!TestMotoneta methodsFor: 'tests' stamp: 'BrunoGrassano 6/30/2020 19:43'!testUnVehiculoAveriadoNoPuedeAvanzar	"Act"	| unaMotoneta |	unaMotoneta := VehiculoTerrestre crearMotoneta.	unaMotoneta romperVehiculo.	"Act y Assert"	self assert: (unaMotoneta cantidadKmAlAvanzarHoras: 2 )equals: 0.! !